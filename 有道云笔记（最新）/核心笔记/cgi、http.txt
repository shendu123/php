一、cgi、fastCgi、php-fpm、进程与线程
	1、cgi
		1)、CGI是Common Gateway Interface（公共网关接口）的缩写。解析动态数据（如：php）的一个协议（就如同http协议可以解析html是一个道理）
		2）、缺点：每请求一个php脚本，就要开启一个php-cgi进程，耗内存与cpu，影响性能。
	2、fastCgi
		1)顾名思义为更快的 CGI，它允许在一个进程内处理多个请求
		2）工作原理：fastCgi启动一个master进程，解析配置文件，初始化执行环境，然后再启动多个 worker。当请求过来时，master 会传递给一个 worker，然后立即可以接受下一个请求。这样就避免了重复的劳动，master负责接收请求，worker负责处理请求
	3、php-fpm
		1)专门为php打造的fastCGI process manager（PHP的fastCGI管理器）nginx使用这些php-fpm进程来和PHP进行通信，你可以把php-fpm理解为php解释器
		2）php-cgi与php-fpm对比
			（1）php-cgi实现了cig协议，php-fpm实现了fastCgi协议
			（2）php-fpm能够平滑重启（不影响网站正常运行）php环境配置（如：我们知道在修改了php.ini之后，wamp和phpstudy需要重启服务器才能重新加载php.ini里的内容。如果是php-fpm，则不用重启web服务器，原先正在工作的php-fpm继续工作，等原先工作的php-fpm完成自己的工作后，就结束掉自己。新增加的php-fpm就使用修改后的php.ini即可
	4、进程与线程
		1）进程：在系统中能独立运行并作为资源分配的基本单位，是执行中的程序。
		2）线程：是进程中的一个实体，作为系统调度基本单位
		3）进程与线程区别：
			（1）进程拥有独立的地址空间，线程没有自己的地址空间，与进程内的其他线程一起共享系统分配给该进程的所有资源
			（2）当一个进程崩溃之后，不会对其他的进程产生影响。线程死掉就相当于整个进程死掉，所以多进程的程序比多线程的程序健壮，但在进程切换的时候，所耗费的资源较大，效率差一些，但是对于一些要求同时进行并且又要共享某些变量的并发操作，只能使用线程而不能使用进程
			（3）一个程序至少有一个进程,一个进程至少有一个线程
			（4）每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口。但是线程不能够独立执行，必须依存在应用程序（进程）中，由应用程序提供多个线程执行控制。
		4）进程与线程优缺点：
			（1）进程利于资源的管理和保护，但执行开销大
			（2）线程执行开销小，多线程利于并发，但不利于资源的管理和保护		

）


二、http协议
	1、网络七层协议：
		1）物理层
			（1）OSI模型最低层的“劳苦大众”。它透明地传输比特流，就是传输的信号。该层上的设备包括集线器、发送器、接收器、电缆、连接器和中继器。
		2）数据链路层
			(1)MAC地址
			(2）主要功能是将从网络层接收到的数据分割成特定的可被物理层传输的帧。 
		3）网络层
			(1)也叫ip层，ip协议
			(2)主要功能是将网络地址翻译成对应的物理地址，并决定如何将数据从发送方路由到接收方
		4）传输层
			(1)面向连接的TCP传输控制协议．另一个是不面向连接的UDP用户数据报协议．
		5）会话层
			(1)主要是解决一个会话的开始进行和结束，在分开的计算机上的两种应用程序之间建立一种虚拟链接
		6）表示层
			(1)主要是编码如ASⅡ 、协议转换			
		7）应用层
			(1)应用程序里面的，如：文件传输协议FTP、电子邮件传输协议SMTP、域名系统服务DNS、网络新闻传输协议NNTP和HTTP协议等
	2、TCP与UDP的区别
		1）、是否面向连接：TCP面向连接（如打电话要先拨号建立连接）;UDP是无连接的，即发送数据之前不需要建立连接
		2）、是否可靠：TCP提供可靠的服务。也就是说，通过TCP连接传送的数据，无差错，不丢失，不重复，且按序到达;UDP尽最大努力交付，即不保证可靠交付
		3）、TCP面向字节流，实际上是TCP把数据看成一连串无结构的字节流;UDP是面向报文的
		4）、每一条TCP连接只能是点到点的;UDP支持一对一，一对多，多对一和多对多的交互通信
		5）、UDP没有拥塞控制，因此网络出现拥塞不会使源主机的发送速率降低（对实时应用很有用，如IP电话，实时视频会议等）
	3、长连接与短连接
		1）长连接：连接后不管是否使用都保持连接，但安全性较差。如socket、数据库
		2）短连接：发送后接收完数据后马上断开连接。如http		
		3）http的长连接 
			（1）HTTP也可以建立长连接的，使用Connection:keep-alive，HTTP 1.1默认进行持久连接。HTTP1.1和HTTP1.0相比较而言，最大的区别就是增加了持久连接支持(貌似最新的 http1.0 可以显示的指定 keep-alive),但还是无状态的，或者说是不可以信任的。 
		4）socket为什么是长连接？http为什么是短连接？
			（1）因为socket操作频繁,(比如qq),每个TCP连接都需要三步握手，这需要时间，如果每个操作都是先连接，再操作的话那么处理速度会降低很多
			（2）对于web网站，如果每个用户都占用一个连接，会造成资源的浪费，如果出现高并发，会造成cpu飙升，内存溢出，所以应该用短连接，用完就走（断开连接）
	4、tcp三次握手：
		1）客户端发送一个包给服务器请求建立连接，等待服务器确认
		2) 服务器收到包后确认，并返回一个包给客户端
		3）客户端收到服务器的包并确认
	5、HTTP请求：
		1）HTTP请求消息（报文）分为三个部分：
			（1）请求行 (请求行的基本格式为： GET /simple.html HTTP/1.1   请求方法：GET ,路径：/simple.html，版本：HTTP/1.1）
			（2）请求头（就是首部字段、报头，请求头信息为：Host主机名、Accept:text/html告诉服务器，当前客户端可以接收的文档类型、Cookie、User-Agent: Mozilla/5.0 (WindowsNT 5.1; rv:5.0)浏览器和操作系统信息）
			（3）请求体（请求内容）
	6、HTTP响应
		1）HTTP响应消息（报文）分为三个部分
			（1）响应行（响应行的基本格式为：HTTP/1.1 200 OK 	版本号：HTTP/1.1，状态码：200，状态文本：OK）
			（2）响应头（就是首部字段、报头，响应头信息为：Date响应的时间、Content-Length此次响应返回的文件长度、Content-Type文件类型、set-cookie）
			（3）响应体（响应内容）
	7、常见的HTTP状态码
		1）2xx	成功--表示请求已被成功接收		  （如：200：请求被正常处理，204：请求被受理但没有资源可以返回）
		2) 3xx	重定向 （如：301：永久性重定向；302：临时重定向，服务器返回的头部信息中会包含一个 Location 字段，内容是重定向到的url）
		3) 4xx  客户端错误--请求有语法错误或请求无法实现   （400：错误的请求、参数错误，401：未授权，403：禁止访问forbidden，404：未找到网页not found）	
		4) 5xx：服务器端错误--服务器未能实现合法的请求    （500：服务器内部程序代码错误，502：错误网关bad gateway，503：服务不可用，504：网关超时time out）
	8、HTTP的缺点与HTTPS
		1）http的缺点：
			一、通信使用明文不加密，内容可能被窃听
			二、不验证通信方身份，可能遭到伪装
			三、无法验证报文完整性，可能被篡改
		2）https：就是HTTP加上加密处理（一般是SSL安全通信线路）+认证+完整性保护
	9、HTTP1.1版本新特性：默认持久连接、管线化（客户端可以同时发出多个HTTP请求，而不用一个个等待响应）、断点续传
	10、http协议特点:
		1)支持b/s   (browser/server  浏览器/服务器模式。  c/s为client/server)
		2)简单快速
		3)无连接 (无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。)
		4)无状态 (无状态是指协议对于事务处理没有记忆能力。在服务器不需要先前信息时它的应答就较快。)		




三、php底层
	1、php是一个用C语言实现包含大量组件的软件框架
	2、三个模块：
		1）内核：用来处理请求、文件流、错误处理等相关操作
		2）Zend引擎（ZE）：用以将源文件转换成机器语言，然后在虚拟机上运行它	
		3）扩展层：是一组函数、类库和流，PHP使用它们来执行一些特定的操作。比如，我们需要MySQL扩展来连接MySQL数据库； 
	3、工作流程：当ZE执行程序时可能会需要连接若干扩展，这时ZE将控制权交给扩展，等处理完特定任务后再返还；最后，ZE将程序运行结果返回给PHP内核，它再将结果传送给SAPI层，最终输出到浏览器上。
	4、四层体系：
		1）Zend引擎：Zend整体用纯C实现，是PHP的内核部分，它将PHP代码翻译（词法、语法解析等一系列编译过程）为可执行opcode的处理并实现相应的处理方法、实现了基本的数据结构（如hashtable、oo）、内存分配及管理、提供了相应的api方法供外部调用，是一切的核心，所有的外围功能均围绕Zend实现。
		2）Extensions：围绕着Zend引擎，extensions通过组件式的方式提供各种基础服务，我们常见的各种内置函数（如array系列）、标准库等都是通过extension来实现，用户也可以根据需要实现自己的extension以达到功能扩展、性能优化等目的（如贴吧正在使用的PHP中间层、富文本解析就是extension的典型应用）。
		3）Sapi：Sapi全称是Server Application Programming Interface，也就是服务端应用编程接口，Sapi通过一系列钩子函数，使得PHP可以和外围交互数据，这是PHP非常优雅和成功的一个设计，通过sapi成功的将PHP本身和上层应用解耦隔离，PHP可以不再考虑如何针对不同应用进行兼容，而应用本身也可以针对自己的特点实现不同的处理方式。
		4）上层应用：这就是我们平时编写的PHP程序，通过不同的sapi方式得到各种各样的应用模式，如通过webserver实现web应用、在命令行下以脚本方式运行等等。
	5、常见sapi：
		1）apache2handler：也就是mod_php5.so模块，这是以apache作为webserver，采用mod_PHP模式运行时候的处理方式，也是现在应用最广泛的一种
		2）cgi：这是webserver和PHP直接的另一种交互方式，也就是cgi协议，在最近几年fastcgi+PHP得到越来越多的应用，也是异步webserver所唯一支持的方式。
		3) cli：命令行调用的应用模式	
					





四、网络杂项
	1、80端口被占用：
		(1)、netstat -ano|findstr "80" （显示的结果每行最后一项数字就是对应进程的PID(进程标号))
	2、cdn加速
		(1)加速原理：CDN加速将网站的内容缓存在网络边缘（离用户接入网络最近的服务器），然后在用户访问网站内容的时候，通过调度系统将用户的请求路由或者引导到离用户接入网络最近或者访问效果的缓存服务器上，由该缓存服务器为用户提供内容服务；相对于直接访问源站，这种方式缩短了用户和内容之间的网络距离，从而达到加速的效果。
	3、uri与url
		（1）URI，是uniform resource identifier，统一资源标识符，用来唯一的标识一个资源。	
		（2）URL是uniform resource locator，统一资源定位器,定义了如何找到这个资源
		（3）URI包括URL与URN,URL是URI的一种
	4、压力测试工具：jmeter	  apache的ab



	

	
			