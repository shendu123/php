一、业务逻辑

1、电商相关业务流程(tpshop)		
1）后台添加商品:选择分类与类型，类型又包含属性与规格
   属性:如：手机：操作系统、屏幕材质、尺寸、通话时长、待机时间
   规格：一个规格具有多个规格值，拿手机举例，如：网络（4G手机、3G手机）、内存（16G、64G）
   属性与规格区别：规格影响价格，属性与价格无关 
   spu与sku区别：就好比苹果6s有两个不同的内存（16G、64G），16G与64G是两个不同的sku,苹果6s是一个spu

   后台添加商品注意的地方：
	（1）添加商品时，同时往“商品规格价格库存表（tp_spec_goods_price）”插入数据：里面记录了不同规格对应的价格与库存
	（2）商品库存：	商品不同规格库存的总和
	（3）商品相册与规格图片是不一样的，商品相册表关联的是商品id，商品规格图片表关联的是规格值id

   
               
2)、商品相关表（8张表）：商品表、分类表、商品类型表，商品属性表，商品属性值表，商品规格表，商品规格值表、商品规格价格库存表

3)、未登录加入购物车：未登录时通过往cart表中插入sessionid来标识是哪个用户加入的购物车，当此用户登录后，根据cart表中的sessionid，把cart表中的用户id改为登录的用户id

4）购物车、下单、支付逻辑、库存
   购物车实现：
		（1）、获取商品详情页表单中的数据，ajax序列化提交到ajaxAddCart进行处理，如goods_id,goods_num,选中的规格（以键为规格名，值为规格值id的数组）如：
			<input type="radio"  rel="16G" name="goods_spec[内存]" value="13" checked="checked">
		（2）对于提交上来的数据，购物车这边先判断商品类型是普通商品还是促销活动商品（如：秒杀、团购），不同类型不同处理
		（3）把提交上来的的规格数组进行排序（sort），然后用_拼接，去“商品规格价格库存表”查询对应的规格价格
		（4）去购物车中查询相同的规格商品是否存在，如果存在就修改商品数量，否则就添加
   下单支付：
		（1）支付方式有四种：余额、第三方支付、积分、优惠券（没过期  并且 订单金额达到 优惠券指定标准）
		（2）订单提交，清空购物车
   何时减库存
		（1）下单时减库存，但会出现恶拍的情况（亲买家，就是故意下单不付款，导致卖家商品库存急剧减少，导致有意向的买家无法购买商品）
		（2）付款成功减库存，但会出现超卖（亲卖家，因第三方支付返回结果存在时差，则当同一时间多个买家同时购买商品并付款成功，会导致下单数目超过库存，卖家库存不足容易引发断货和投诉，成本增加；）
		（3）恶拍解决方案
			一、买家可设置［库存保留时间］，当买家拍下商品但n分钟不付款，则自动取消该订单，既给了拍下的买家考虑的时间，又给了其他真实买家机会
			二、限购：用各种条件来限制买家的购买件数，比如一个账号、一个ip，只能买一件，这样恶拍的成本就被大大提高
		（4）超卖解决方案
			一、尽可能晚地验证该商品是否有库存，比如第一个用户付款成功了但返回支付结果有延迟，第二个用户等到确认订单要付款时再检查一下库存，这个时候支付结果已经返回，库存已经减少


	
5）、秒杀、团购业务逻辑
     		（1）抢购表设计(重要字段)：id、参加抢购的商品id、抢购价格、参加抢购的商品数量、每人限购数、开始时间、结束时间 、是否结束is_end
     		（2）商品表添加两个字段：优惠活动id、优惠活动类型type（如:1为秒杀、2为团购、3为优惠促销）
     		（3）如有设置商品活动，则商品详情页优先显示活动信息（如：抢购标题、抢购价、剩余时间），否则显示普通商品信息（如:价格）
     		（4）不能参与抢购的情况：购买数量大于每人限购数、活动时间已结束

6）积分商城 
      		（1）后台全局设置积分换算比例（point_rate）。如：1元 = 1积分       1元 = 10积分       1元 = 100积分
      		（2）后台添加商品时，根据商品价来赠送积分（根据不同商品后台设置，exchange_integral）	
      		（3）算法：$goods['shop_price']-（$goods['exchange_integral']/$point_rate）+$goods['exchange_integral']				
     

      
      	
7）、qq登录、微信登录业务逻辑

	qq授权登录(oauth2.0)流程：
		（1）、构造请求参数（如：app_id,app_secret,callback回调地址），调用接口，获取code授权码
		（2）、根据code，调用相应接口，获取access_token
		（3）、根据access_token,调用相应接口，获取用户openid
		（4）、根据access_token与openid获取用户信息


2、权限管理：rbac  基于角色的访问控制（Role-Based Access Control）
	1）权限表设计：
		（1）、think_user用户表
		（2）、think_role角色表
		（3）、think_role_user角色与用户关联表
		（4）、think_node节点表
		（5）、think_role_node角色与节点关联表（权限表）
	2）授权：
		（1）给用户选定角色
		（2）给角色授权，就是往role_node表里插入数据（role_id以及选中的node_id）
		（3）编辑权限提交表单时，先删除该角色下所有权限，重新插入选中的权限
	3）鉴权：
		（1）查询出登录用户id对应的role_id，以role_id为where条件，node表与role_rode表关联查询此角色对应的node_id并返回true或false（此node_id便是此角色拥有的权限）
		（2）后台网站所有模块都会走基控制器，在基控制器构造函数里调用权限验证的方法,如果返回false，则抛出错误提示（throw new exception('没有权限')）
		（3）若要在前台判断此节点是否展示，则应返回权限node_id列表，然后判断要操作的节点id是否在node_id列表中，在就显示，不在就不显示	


二、杂项

	1、得意之作？说下项目中遇到了哪些困难，最后怎么解决的？
		1）图片（数据）采集
			（1）利用curl抓取页面，然后用正则匹配图片，循环取出每张图片的地址，创建目录，下载并保存
	2、支付、登录插件怎么编写
		1）文件与文件夹规范命名，不同业务类型的接口放在不同的文件夹（如：支付插件都放在payment文件夹下，登录插件都放在login文件夹下）
		2）插件的安装与卸载只是修改数据库表中的字段状态值（如：status  0卸载 1安装）
		3）插件对应的接口配置名称与配置值在配置文件中定义，编辑配置页面循环读取显示，提交表单插入数据库，并且改变配置文件中的配置值！
	3、支付流程：
		1）把支付宝api接口配置文件中的数据与前台提交的订单数据通过form表单隐藏域post提交给支付宝支付网关，然后根据notify_url返回的状态（成功与失败）来改变订单的状态。如果成功则跳转到return_rul.php定义的成功页面
	4、公众号开发流程：
		1）去公众号开发者模式下接入商户url，（这个url是为了验证你接下来处理的消息是否来自微信服务器，微信会提供一个校验机制，比如要定义相同的token，如果校验通过，则接入成功）
		2）用户用微信发送内容（XML数据）给公众号，php服务端通过php函数转化为对象，根据对象获取数据。然后再把想要回复的内容封装成字符串或XML的形式返回给微信用户	
	5、tp5.0与tp3.2对比
		1）用tp5.0写接口的居多
		2）5.0的\think\Validate验证类不仅适用于模型，在控制器也可直接调用
		3）助手函数：3.2的M方法5.0换成了db，D方法换成了model,C方法换成了Config，U方法换成了url方法
		4）5.0兼容php7
		5) 5.0是惰性加载：一个类只有在使用的时候才include(require)进来。tp3.2.3的时候，核心的文件是统一加载的
	6、yii优点
		1）易扩展
		2）widget 窗口小部件的应用，可以更加方便的构造通用模块
		3）按需加载文件（惰性加载），对性能有很大提高
		4）gii自动生成（crud增删改查   create、read、update、delete）项目，开发效率高
		5）Yii的组件机制
	
	

